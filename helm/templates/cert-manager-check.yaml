{{- if .Values.certManager.enabled }}
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kustomize-patcher-cert-manager-check
  namespace: {{ .Release.Namespace }}
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "-10"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kustomize-patcher-cert-manager-check
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "-10"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
rules:
- apiGroups: ["apiextensions.k8s.io"]
  resources: ["customresourcedefinitions"]
  verbs: ["get", "list"]
- apiGroups: ["cert-manager.io"]
  resources: ["certificates", "issuers", "clusterissuers"]
  verbs: ["get", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: kustomize-patcher-cert-manager-check
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "-10"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kustomize-patcher-cert-manager-check
subjects:
- kind: ServiceAccount
  name: kustomize-patcher-cert-manager-check
  namespace: {{ .Release.Namespace }}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: kustomize-patcher-cert-manager-check
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  template:
    spec:
      restartPolicy: Never
      serviceAccountName: kustomize-patcher-cert-manager-check
      containers:
      - name: cert-manager-check
        image: bitnami/kubectl:latest
        command:
        - /bin/sh
        - -c
        - |
          echo "Checking for cert-manager CRDs..."
          
          if kubectl get crd certificates.cert-manager.io > /dev/null 2>&1; then
            echo "✓ cert-manager CRDs found"
          else
            echo "✗ cert-manager CRDs not found"
            echo "Please install cert-manager first:"
            echo "helm repo add jetstack https://charts.jetstack.io"
            echo "helm install cert-manager jetstack/cert-manager --namespace cert-manager --create-namespace --set crds.enabled=true"
            exit 1
          fi
{{- end }}